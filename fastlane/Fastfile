# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.62.1"

default_platform :ios

platform :ios do
  before_all do
  end

  lane :tests do
    cocoapods(use_bundle_exec: false)
    run_tests(workspace: "Trust.xcworkspace",
              devices: ["iPhone 6s", "iPhone 6s Plus"],
              scheme: "TrustTests",
              clean: false)
  end

  def screenshots
    snapshot
    frameit(white: true)
  end

  desc "TestFlight deployment to itunes connect"
  lane :beta do
    ensure_git_branch(branch: "wallet_1.0_dev")
    ensure_git_status_clean
    cocoapods(use_bundle_exec: false)
    build_app(
      scheme: "Trust",
      export_method: "app-store",
      export_options: {
        iCloudContainerEnvironment: "Production",
        teamID: "HMT2AL7Q6Y",
        provisioningProfiles: {
          "manhlx.kyber.network" => "iOS Distribution AppStore Kyber Network"
        }
      }
    )
    old_build_number = get_build_number(xcodeproj: "Trust.xcodeproj")
    notification(subtitle: "Built Successfully!", message: "Start uploading build " + old_build_number + " to TestFlight.")
    upload_to_testflight(
	skip_waiting_for_build_processing: true,
    )
    notification(subtitle: "Uploaded Successfully!", message: "New build (" + old_build_number + ") has been uploaded successfully to TestFlight. Waiting for processing.")
    increment_build_number()
    git_add
    version_number = get_version_number(xcodeproj: "Trust.xcodeproj")
    build_number = get_build_number(xcodeproj: "Trust.xcodeproj")
    git_commit(path: "./*.plist", message: "Increase build number " + build_number + " version " + version_number)
    push_to_git_remote(
      remote: "origin",
      local_branch: "wallet_1.0_dev",
      remote_branch: "wallet_1.0_dev",
      tags: false
    )
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    cocoapods(use_bundle_exec: false)
    increment_build_number
    ensure_git_branch()
    increment_version_number(bump_type: "patch")
    cert
    match(type: "appstore", readonly: true)
    gym(scheme: "Trust")
    commit_version_bump(message: "Version Bump", force: true)
    deliver(force: true)
    push_to_git_remote
  end

  desc "Screenshots"
  lane :screenshots do
    screenshots
  end

  desc "Localize"
  lane :localize do
    run_localizer
  end

  lane :update_lokalise do
    lokalise_metadata(
      api_token: ENV['LOKALISE_API_TOKEN'],
      project_identifier: ENV['LOKALISE_STORE_PROJECT_ID'],
      action: "update_lokalise",
      add_languages: true,
      override_translation: false
    )
  end

  lane :update_itunes do
   lokalise_metadata(
      api_token: ENV['LOKALISE_API_TOKEN'],
      project_identifier: ENV['LOKALISE_STORE_PROJECT_ID'],
      action: "update_itunes"
   )
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
